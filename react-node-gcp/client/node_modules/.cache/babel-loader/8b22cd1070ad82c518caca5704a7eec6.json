{"ast":null,"code":"import _classCallCheck from \"D:\\\\GitHub\\\\COMP4513-Assignment2\\\\react-node-gcp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\GitHub\\\\COMP4513-Assignment2\\\\react-node-gcp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\GitHub\\\\COMP4513-Assignment2\\\\react-node-gcp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\GitHub\\\\COMP4513-Assignment2\\\\react-node-gcp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\GitHub\\\\COMP4513-Assignment2\\\\react-node-gcp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\GitHub\\\\COMP4513-Assignment2\\\\react-node-gcp\\\\client\\\\src\\\\components\\\\MapContainer.js\";\nimport React from 'react';\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nexport var MapContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MapContainer, _React$Component);\n\n  function MapContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapContainer).call(this, props));\n\n    _this.handleView = function () {\n      console.log(\"handleView\");\n\n      _this.props.changeRenderView(\"view\");\n    };\n\n    _this.handleEdit = function () {\n      _this.props.changeRenderView(\"edit\");\n    };\n\n    _this.calculateDistance = function (lat1, lon1) {\n      var lat2 = _this.state.currentLocation.lat;\n      var lon2 = _this.state.currentLocation.lng; //condition for what happens if the user does not allow access to share their location\n\n      if (lat2 !== 0 && lon2 !== 0) {\n        var R = 6371e3; // metres\n\n        var φ1 = _this.toRadians(lat1);\n\n        var φ2 = _this.toRadians(lat2);\n\n        var Δφ = _this.toRadians(lat2 - lat1);\n\n        var Δλ = _this.toRadians(lon2 - lon1);\n\n        var a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        var d = R * c;\n        d = Math.round(d);\n      } else {\n        d = \"Unable to calculate distance.\";\n      }\n\n      console.log(\"Distance = \" + d);\n      return d;\n    };\n\n    _this.toRadians = function (degrees) {\n      return degrees * Math.PI / 180;\n    };\n\n    _this.state = {\n      currentLocation: {\n        lat: 0,\n        lng: 0\n      }\n    };\n    return _this;\n  }\n  /**\r\n   * Renders/Displays website elements.\r\n   */\n\n\n  _createClass(MapContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var imgURL = \"https://storage.googleapis.com/funwebdev-3rd-travel/square-medium/\";\n      var photo = this.props.photos.find(function (obj) {\n        return obj.id === _this2.props.currentPhoto;\n      }); //handles what happens when selected photo to display map does not exist.\n      //Code from https://www.npmjs.com/package/google-maps-react\n\n      if (photo != null) {\n        return React.createElement(\"div\", {\n          className: \"mapContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, React.createElement(Map, {\n          className: \"map\",\n          key: photo.id,\n          style: {\n            width: '500px',\n            height: '900px',\n            position: 'relative'\n          },\n          google: this.props.google,\n          zoom: 14,\n          initialCenter: {\n            lat: Number(photo.latitude),\n            lng: Number(photo.longitude)\n          },\n          onClick: this.onMapClicked,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, React.createElement(Marker, {\n          onClick: this.onMarkerClick,\n          name: 'Current location',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }))), React.createElement(\"div\", {\n          className: \"mapDetails\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: imgURL + photo.path,\n          alt: photo.title,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }), React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, photo.title), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, \"Distance from User(KM): \", this.calculateDistance(photo.latitude, photo.longitude)), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, photo.description), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, photo.city, \", \", photo.country), React.createElement(\"button\", {\n          onClick: this.handleView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, \"View\"), React.createElement(\"button\", {\n          onClick: this.handleEdit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, \"Edit\")));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"detailsPhotoBox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, \"Photo has been removed\"));\n      }\n    }\n    /**\r\n     * This function calls a parent component function that changes the display from the map into the photo view of data.\r\n     */\n\n  }, {\n    key: \"componentDidMount\",\n\n    /**\r\n     * This function activates once data and component is acquired and loaded into DOM.\r\n     */\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      // document.querySelector(\".map\").style.width = \"50%\";\n      // document.querySelector(\".map\").style.height = \"95%\";\n      // check for navigation in browser\n      // if allowed set currentlocations coordinate\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function (pos) {\n          var coords = pos.coords;\n\n          _this3.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        }, // this will set the state to false when the request for location is block/or denied\n        function (error) {\n          _this3.setState({\n            allowLocation: \"false\"\n          });\n        });\n      }\n    } // componentDidUpdate () {\n    //     document.querySelector(\".map\").style.width = \"50%\";\n    //     document.querySelector(\".map\").style.height = \"95%\";\n    // }\n\n  }]);\n\n  return MapContainer;\n}(React.Component);\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDKABHgdY2tt-ny_J2y6tG7rPAPZ853Ss4\"\n})(MapContainer);","map":{"version":3,"sources":["D:\\GitHub\\COMP4513-Assignment2\\react-node-gcp\\client\\src\\components\\MapContainer.js"],"names":["React","Map","Marker","GoogleApiWrapper","MapContainer","props","handleView","console","log","changeRenderView","handleEdit","calculateDistance","lat1","lon1","lat2","state","currentLocation","lat","lon2","lng","R","φ1","toRadians","φ2","Δφ","Δλ","a","Math","sin","cos","c","atan2","sqrt","d","round","degrees","PI","imgURL","photo","photos","find","obj","id","currentPhoto","width","height","position","google","Number","latitude","longitude","onMapClicked","onMarkerClick","path","title","description","city","country","navigator","geolocation","getCurrentPosition","pos","coords","setState","error","allowLocation","Component","apiKey"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\r\n \r\nexport class MapContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentLocation: {\r\n                lat: 0,\r\n                lng: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders/Displays website elements.\r\n     */\r\n    render() {\r\n        const imgURL = `https://storage.googleapis.com/funwebdev-3rd-travel/square-medium/`;\r\n        let photo = this.props.photos.find((obj) => obj.id === this.props.currentPhoto);\r\n        //handles what happens when selected photo to display map does not exist.\r\n        //Code from https://www.npmjs.com/package/google-maps-react\r\n        if (photo != null) {\r\n            return (\r\n                <div className=\"mapContainer\">\r\n                <div>\r\n                    <Map className=\"map\" \r\n                    key={photo.id}\r\n                    style={{width: '500px', height: '900px', position: 'relative'}} \r\n                    google={this.props.google} zoom={14}\r\n                    initialCenter={{lat: Number(photo.latitude), lng: Number(photo.longitude) }}\r\n                    onClick={this.onMapClicked}\r\n                    \r\n                    >\r\n                \r\n                        <Marker onClick={this.onMarkerClick}\r\n                                name={'Current location'} />\r\n                \r\n                        {/* <InfoWindow onClose={this.onInfoWindowClose}>\r\n                            <div>\r\n                            <h1>{this.state.selectedPlace.name}</h1>\r\n                            </div>\r\n                        </InfoWindow> */}\r\n                    </Map>\r\n                </div>\r\n            \r\n                <div className=\"mapDetails\">\r\n                        <img src={imgURL+photo.path} alt={photo.title}/>\r\n                        <br></br>\r\n                        <h2>{photo.title}</h2>\r\n                        <p>Distance from User(KM): {this.calculateDistance(photo.latitude, photo.longitude)}</p>\r\n                        <p>{photo.description}</p>\r\n                        <p>{photo.city}, {photo.country}</p>\r\n                        <button onClick={this.handleView}>View</button>\r\n                        <button onClick={this.handleEdit}>Edit</button>\r\n                </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"detailsPhotoBox\">\r\n                    <h1>Photo has been removed</h1>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function calls a parent component function that changes the display from the map into the photo view of data.\r\n     */\r\n    handleView = () => {\r\n        console.log(\"handleView\");\r\n        this.props.changeRenderView(\"view\");\r\n    }\r\n\r\n    /**\r\n     * This function calls a parent component function that changes the display from the map into the edit photo view of data.\r\n     */\r\n    handleEdit = () => {\r\n        this.props.changeRenderView(\"edit\");\r\n    }\r\n\r\n    /**\r\n     * This function calculates the distance in km from user to selected location to map.\r\n     * The code from https://www.movable-type.co.uk/scripts/latlong.html\r\n     * @param lat1 - latitude of selected photo\r\n     * @param lon1 - longitude of selected photo\r\n     */\r\n    calculateDistance = (lat1, lon1) => {\r\n        let lat2 = this.state.currentLocation.lat;\r\n        let lon2 = this.state.currentLocation.lng;\r\n        //condition for what happens if the user does not allow access to share their location\r\n        if (lat2 !== 0 && lon2 !== 0) {\r\n            var R = 6371e3; // metres\r\n            var φ1 = this.toRadians(lat1);\r\n            var φ2 = this.toRadians(lat2);\r\n            var Δφ = this.toRadians(lat2-lat1);\r\n            var Δλ = this.toRadians(lon2-lon1);\r\n\r\n            var a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\r\n                    Math.cos(φ1) * Math.cos(φ2) *\r\n                    Math.sin(Δλ/2) * Math.sin(Δλ/2);\r\n            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n\r\n            var d = R * c;\r\n            d = Math.round(d);\r\n        } else {\r\n            d = \"Unable to calculate distance.\";\r\n        }\r\n        console.log(\"Distance = \" + d);\r\n        return d;\r\n    }\r\n\r\n    /**\r\n     * This function calculates degrees into radians.\r\n     * @param degrees - passed degree latitude or longitude value\r\n     */\r\n    toRadians = (degrees) => {\r\n        return (degrees * Math.PI) / 180;\r\n    }\r\n\r\n    /**\r\n     * This function activates once data and component is acquired and loaded into DOM.\r\n     */\r\n    componentDidMount () {\r\n        // document.querySelector(\".map\").style.width = \"50%\";\r\n        // document.querySelector(\".map\").style.height = \"95%\";\r\n\r\n        // check for navigation in browser\r\n        // if allowed set currentlocations coordinate\r\n        if (navigator && navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition( (pos) => {\r\n                const coords = pos.coords;\r\n                this.setState({\r\n                    currentLocation: {\r\n                        lat: coords.latitude,\r\n                        lng: coords.longitude\r\n                    }\r\n                });\r\n            },\r\n            // this will set the state to false when the request for location is block/or denied\r\n            (error) => {\r\n                this.setState({allowLocation: \"false\"});\r\n            }\r\n\r\n            );\r\n        } \r\n    }\r\n\r\n    // componentDidUpdate () {\r\n    //     document.querySelector(\".map\").style.width = \"50%\";\r\n    //     document.querySelector(\".map\").style.height = \"95%\";\r\n    // }\r\n\r\n}\r\n \r\nexport default GoogleApiWrapper({\r\n  apiKey: (\"AIzaSyDKABHgdY2tt-ny_J2y6tG7rPAPZ853Ss4\")\r\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}