{"ast":null,"code":"'use strict';\n\nvar external = require(\"./external\");\n\nvar DataWorker = require('./stream/DataWorker');\n\nvar DataLengthProbe = require('./stream/DataLengthProbe');\n\nvar Crc32Probe = require('./stream/Crc32Probe');\n\nvar DataLengthProbe = require('./stream/DataLengthProbe');\n/**\r\n * Represent a compressed object, with everything needed to decompress it.\r\n * @constructor\r\n * @param {number} compressedSize the size of the data compressed.\r\n * @param {number} uncompressedSize the size of the data after decompression.\r\n * @param {number} crc32 the crc32 of the decompressed file.\r\n * @param {object} compression the type of compression, see lib/compressions.js.\r\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the compressed data.\r\n */\n\n\nfunction CompressedObject(compressedSize, uncompressedSize, crc32, compression, data) {\n  this.compressedSize = compressedSize;\n  this.uncompressedSize = uncompressedSize;\n  this.crc32 = crc32;\n  this.compression = compression;\n  this.compressedContent = data;\n}\n\nCompressedObject.prototype = {\n  /**\r\n   * Create a worker to get the uncompressed content.\r\n   * @return {GenericWorker} the worker.\r\n   */\n  getContentWorker: function getContentWorker() {\n    var worker = new DataWorker(external.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new DataLengthProbe(\"data_length\"));\n    var that = this;\n    worker.on(\"end\", function () {\n      if (this.streamInfo['data_length'] !== that.uncompressedSize) {\n        throw new Error(\"Bug : uncompressed data size mismatch\");\n      }\n    });\n    return worker;\n  },\n\n  /**\r\n   * Create a worker to get the compressed content.\r\n   * @return {GenericWorker} the worker.\r\n   */\n  getCompressedWorker: function getCompressedWorker() {\n    return new DataWorker(external.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\", this.compressedSize).withStreamInfo(\"uncompressedSize\", this.uncompressedSize).withStreamInfo(\"crc32\", this.crc32).withStreamInfo(\"compression\", this.compression);\n  }\n};\n/**\r\n * Chain the given worker with other workers to compress the content with the\r\n * given compresion.\r\n * @param {GenericWorker} uncompressedWorker the worker to pipe.\r\n * @param {Object} compression the compression object.\r\n * @param {Object} compressionOptions the options to use when compressing.\r\n * @return {GenericWorker} the new worker compressing the content.\r\n */\n\nCompressedObject.createWorkerFrom = function (uncompressedWorker, compression, compressionOptions) {\n  return uncompressedWorker.pipe(new Crc32Probe()).pipe(new DataLengthProbe(\"uncompressedSize\")).pipe(compression.compressWorker(compressionOptions)).pipe(new DataLengthProbe(\"compressedSize\")).withStreamInfo(\"compression\", compression);\n};\n\nmodule.exports = CompressedObject;","map":null,"metadata":{},"sourceType":"script"}