{"ast":null,"code":"import _classCallCheck from \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\src\\\\components\\\\MapContainer.js\";\nimport React from 'react';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nexport var MapContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MapContainer, _React$Component);\n\n  function MapContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(MapContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var imgURL = \"https://storage.googleapis.com/funwebdev-3rd-travel/square-medium/\";\n      var photo = this.props.photos.find(function (obj) {\n        return obj.id === _this2.props.currentPhoto;\n      });\n\n      if (photo != null) {\n        return React.createElement(\"div\", {\n          className: \"mapContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, React.createElement(Map, {\n          className: \"map\",\n          key: photo.id,\n          style: {\n            width: '500px',\n            height: '900px',\n            position: 'relative'\n          },\n          google: this.props.google,\n          zoom: 14,\n          initialCenter: {\n            lat: Number(photo.latitude),\n            lng: Number(photo.longitude)\n          },\n          onClick: this.onMapClicked,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, React.createElement(Marker, {\n          onClick: this.onMarkerClick,\n          name: 'Current location',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }))), React.createElement(\"div\", {\n          className: \"mapDetails\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: imgURL + photo.path,\n          alt: photo.title,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }), React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, photo.title), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, \"Distance from User: \", this.calculateDistance(photo.latitude, photo.longitude)), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, photo.description), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, photo.city, \", \", photo.country), React.createElement(\"button\", {\n          onClick: this.handleView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, \"View\"), React.createElement(\"button\", {\n          onClick: this.handleEdit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, \"Edit\")));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"detailsPhotoBox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, \"Photo has been removed\"));\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      // document.querySelector(\".map\").style.width = \"50%\";\n      // document.querySelector(\".map\").style.height = \"95%\";\n      // check for navigation in browser\n      // if allowed set currentlocations coordinate\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function (pos) {\n          var coords = pos.coords;\n\n          _this3.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        }, // this will set the state to false when the request for location is block/or denied\n        function (error) {\n          _this3.setState({\n            allowLocation: \"false\"\n          });\n        });\n      }\n    } // componentDidUpdate () {\n    //     document.querySelector(\".map\").style.width = \"50%\";\n    //     document.querySelector(\".map\").style.height = \"95%\";\n    // }\n\n  }]);\n\n  return MapContainer;\n}(React.Component);\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDKABHgdY2tt-ny_J2y6tG7rPAPZ853Ss4\"\n})(MapContainer);","map":{"version":3,"sources":["D:\\GitHub\\comp4513-assignment1-version-2\\my-app\\src\\components\\MapContainer.js"],"names":["React","Map","InfoWindow","Marker","GoogleApiWrapper","MapContainer","props","imgURL","photo","photos","find","obj","id","currentPhoto","width","height","position","google","lat","Number","latitude","lng","longitude","onMapClicked","onMarkerClick","path","title","calculateDistance","description","city","country","handleView","handleEdit","navigator","geolocation","getCurrentPosition","pos","coords","setState","currentLocation","error","allowLocation","Component","apiKey"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\r\n \r\nexport class MapContainer extends React.Component {\r\n    constructor(props) {\r\n        \r\n    }\r\n    render() {\r\n        const imgURL = `https://storage.googleapis.com/funwebdev-3rd-travel/square-medium/`;\r\n        let photo = this.props.photos.find((obj) => obj.id === this.props.currentPhoto);\r\n        if (photo != null) {\r\n            return (\r\n                <div className=\"mapContainer\">\r\n                <div>\r\n                    <Map className=\"map\" \r\n                    key={photo.id}\r\n                    style={{width: '500px', height: '900px', position: 'relative'}} \r\n                    google={this.props.google} zoom={14}\r\n                    initialCenter={{lat: Number(photo.latitude), lng: Number(photo.longitude) }}\r\n                    onClick={this.onMapClicked}\r\n                    \r\n                    >\r\n                \r\n                        <Marker onClick={this.onMarkerClick}\r\n                                name={'Current location'} />\r\n                \r\n                        {/* <InfoWindow onClose={this.onInfoWindowClose}>\r\n                            <div>\r\n                            <h1>{this.state.selectedPlace.name}</h1>\r\n                            </div>\r\n                        </InfoWindow> */}\r\n                    </Map>\r\n                </div>\r\n            \r\n                <div className=\"mapDetails\">\r\n                        <img src={imgURL+photo.path} alt={photo.title}/>\r\n                        <br></br>\r\n                        <h2>{photo.title}</h2>\r\n                        <p>Distance from User: {this.calculateDistance(photo.latitude, photo.longitude)}</p>\r\n                        <p>{photo.description}</p>\r\n                        <p>{photo.city}, {photo.country}</p>\r\n                        <button onClick={this.handleView}>View</button>\r\n                        <button onClick={this.handleEdit}>Edit</button>\r\n                </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"detailsPhotoBox\">\r\n                    <h1>Photo has been removed</h1>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    handleView = () => {\r\n        console.log(\"handleView\");\r\n        this.props.changeRenderView(\"view\");\r\n    }\r\n\r\n    handleEdit = () => {\r\n        this.props.changeRenderView(\"edit\");\r\n    }\r\n\r\n    // code from https://www.movable-type.co.uk/scripts/latlong.html\r\n    calculateDistance = (lat1, lon1) => {\r\n        if (true) {\r\n            let lat2 = this.state.currentLocation.lat;\r\n            let lon2 = this.state.currentLocation.lng;\r\n\r\n            var R = 6371e3; // metres\r\n            var φ1 = this.toRadians(lat1);\r\n            var φ2 = this.toRadians(lat2);\r\n            var Δφ = this.toRadians(lat2-lat1);\r\n            var Δλ = this.toRadians(lon2-lon1);\r\n\r\n            var a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\r\n                    Math.cos(φ1) * Math.cos(φ2) *\r\n                    Math.sin(Δλ/2) * Math.sin(Δλ/2);\r\n            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n\r\n            var d = R * c;\r\n            d = Math.round(d);\r\n        } else {\r\n            d = \"Unable to calculate distance.\";\r\n        }\r\n        console.log(\"Distance = \" + d);\r\n        return d;\r\n    }\r\n    \r\n    toRadians = (degrees) => {\r\n        return (degrees * Math.PI) / 180;\r\n    }\r\n\r\n    componentDidMount () {\r\n        // document.querySelector(\".map\").style.width = \"50%\";\r\n        // document.querySelector(\".map\").style.height = \"95%\";\r\n\r\n        // check for navigation in browser\r\n        // if allowed set currentlocations coordinate\r\n        if (navigator && navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition( (pos) => {\r\n                const coords = pos.coords;\r\n                this.setState({\r\n                    currentLocation: {\r\n                        lat: coords.latitude,\r\n                        lng: coords.longitude\r\n                    }\r\n                });\r\n            },\r\n            // this will set the state to false when the request for location is block/or denied\r\n            (error) => {\r\n                this.setState({allowLocation: \"false\"});\r\n            }\r\n\r\n            );\r\n        } \r\n    }\r\n\r\n    // componentDidUpdate () {\r\n    //     document.querySelector(\".map\").style.width = \"50%\";\r\n    //     document.querySelector(\".map\").style.height = \"95%\";\r\n    // }\r\n\r\n}\r\n \r\nexport default GoogleApiWrapper({\r\n  apiKey: (\"AIzaSyDKABHgdY2tt-ny_J2y6tG7rPAPZ853Ss4\")\r\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}