{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  /**\r\n   * True if this is running in Nodejs, will be undefined in a browser.\r\n   * In a browser, browserify won't include this file and the whole module\r\n   * will be resolved an empty object.\r\n   */\n  isNode: typeof Buffer !== \"undefined\",\n\n  /**\r\n   * Create a new nodejs Buffer from an existing content.\r\n   * @param {Object} data the data to pass to the constructor.\r\n   * @param {String} encoding the encoding to use.\r\n   * @return {Buffer} a new Buffer.\r\n   */\n  newBufferFrom: function newBufferFrom(data, encoding) {\n    if (Buffer.from && Buffer.from !== Uint8Array.from) {\n      return Buffer.from(data, encoding);\n    } else {\n      if (typeof data === \"number\") {\n        // Safeguard for old Node.js versions. On newer versions,\n        // Buffer.from(number) / Buffer(number, encoding) already throw.\n        throw new Error(\"The \\\"data\\\" argument must not be a number\");\n      }\n\n      return new Buffer(data, encoding);\n    }\n  },\n\n  /**\r\n   * Create a new nodejs Buffer with the specified size.\r\n   * @param {Integer} size the size of the buffer.\r\n   * @return {Buffer} a new Buffer.\r\n   */\n  allocBuffer: function allocBuffer(size) {\n    if (Buffer.alloc) {\n      return Buffer.alloc(size);\n    } else {\n      var buf = new Buffer(size);\n      buf.fill(0);\n      return buf;\n    }\n  },\n\n  /**\r\n   * Find out if an object is a Buffer.\r\n   * @param {Object} b the object to test.\r\n   * @return {Boolean} true if the object is a Buffer, false otherwise.\r\n   */\n  isBuffer: function isBuffer(b) {\n    return Buffer.isBuffer(b);\n  },\n  isStream: function isStream(obj) {\n    return obj && typeof obj.on === \"function\" && typeof obj.pause === \"function\" && typeof obj.resume === \"function\";\n  }\n};","map":null,"metadata":{},"sourceType":"script"}