{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\GitHub\\\\comp4513-assignment1-version-2\\\\my-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport * as cloneDeep from 'lodash/cloneDeep';\nimport { Route } from 'react-router-dom';\nimport PhotoBrowser from './components/PhotoBrowser.js';\nimport Home from './components/Home.js';\nimport About from './components/About.js';\nimport _ from 'lodash';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); // temp backup copy of photos\n\n    _this.updatePhoto = function (id, photo) {\n      // Create a deep clone of photo array from state.\n      // We will use a lodash function for that task.\n      var copyPhotos = cloneDeep(_this.state.photos); // find photo to update in cloned array\n\n      var photoToReplace = copyPhotos.find(function (p) {\n        return p.id === id;\n      }); // replace photo fields with edited values\n\n      photoToReplace.title = photo.title;\n      photoToReplace.city = photo.city;\n      photoToReplace.country = photo.country;\n      photoToReplace.description = photo.description;\n      photoToReplace.latitude = photo.latitude;\n      photoToReplace.longitude = photo.longitude; // update state\n\n      _this.setState({\n        photos: copyPhotos\n      });\n    };\n\n    _this.addPhotoToFavorites = function (id) {\n      // find photo to add\n      var photo = _this.state.photos.find(function (p) {\n        return p.id === id;\n      });\n\n      console.log(photo); // check if item is already in favorite\n      // if not add it\n\n      if (!_this.state.favorites.find(function (p) {\n        return p.id === id;\n      })) {\n        // create copy of favorites\n        var copyFavorites = cloneDeep(_this.state.favorites); // push item into array\n\n        copyFavorites.push(photo); // update state\n\n        _this.setState({\n          favorites: copyFavorites\n        }); // update local storage\n\n\n        _this.updateLocalStorage(copyFavorites);\n      } else {\n        console.log(\"Photo already in favorites\");\n      }\n    };\n\n    _this.removePhoto = function (id) {\n      var index = _.findIndex(_this.state.photos, ['id', id]);\n\n      if (index > -1) {\n        // create copy of favorites\n        var copyPhotos = cloneDeep(_this.state.photos); //console.log(copyPhotos);\n        // delete photo\n\n        _.remove(copyPhotos, copyPhotos[index]); // update state\n\n\n        _this.setState({\n          photos: copyPhotos\n        });\n      }\n    };\n\n    _this.removeFav = function (id) {\n      var index = _.findIndex(_this.state.favorites, ['id', id]);\n\n      if (index > -1) {\n        // create copy of favorites\n        var copyFav = cloneDeep(_this.state.favorites); //console.log(copyPhotos);\n        // delete fav\n\n        _.remove(copyFav, copyFav[index]); // update state\n\n\n        _this.setState({\n          favorites: copyFav\n        }); // update local storage\n\n\n        _this.updateLocalStorage(copyFav);\n      }\n    };\n\n    _this.updateLocalStorage = function (data) {\n      localStorage.setItem('favorites', JSON.stringify(data));\n    };\n\n    _this.getLocalStorageFav = function () {\n      return JSON.parse(localStorage.getItem('favorites'));\n    };\n\n    _this.downloadFavorites = function () {\n      var JSZip = require(\"jszip\");\n\n      var JSZipUtils = require('jszip-utils');\n\n      var FileSaver = require(\"file-saver\");\n\n      var image = function image(url) {\n        return new Promise(function (resolve, reject) {\n          JSZipUtils.getBinaryContent(url, function (err, data) {\n            if (err) reject(err);else resolve(data);\n          });\n        });\n      };\n\n      var url = \"https://storage.googleapis.com/funwebdev-3rd-travel/large/9504606628.jpg\";\n      var zip = new JSZip();\n      zip.file(\"test.jpg\", image(url), {\n        binary: true\n      });\n      zip.generateAsync({\n        type: \"blob\"\n      }).then(function (content) {\n        FileSaver.saveAs(content, \"archive.zip\");\n      });\n    };\n\n    _this.state = {\n      photos: [],\n      favorites: [],\n      temp: []\n    };\n    return _this;\n  }\n  /**\r\n   * Asynchronous request for travel photo data.\r\n   */\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var url, response, jsonData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.getLocalStorageFav() !== null) {\n                  this.setState({\n                    favorites: this.getLocalStorageFav()\n                  });\n                }\n\n                _context.prev = 1;\n                url = \"http://randyconnolly.com/funwebdev/services/travel/images.php\";\n                _context.next = 5;\n                return fetch(url);\n\n              case 5:\n                response = _context.sent;\n                _context.next = 8;\n                return response.json();\n\n              case 8:\n                jsonData = _context.sent;\n                this.setState({\n                  photos: jsonData,\n                  temp: jsonData\n                });\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](1);\n                console.error(_context.t0);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 12]]);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n    /**\r\n     * Renders/Displays website elements.\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/\",\n        exact: true,\n        component: Home,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/home\",\n        exact: true,\n        component: Home,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/browse\",\n        exact: true,\n        render: function render(props) {\n          return React.createElement(PhotoBrowser, {\n            downloadFavorites: _this2.downloadFavorites,\n            removeFav: _this2.removeFav,\n            removePhoto: _this2.removePhoto,\n            favorites: _this2.state.favorites,\n            photos: _this2.state.photos,\n            updatePhoto: _this2.updatePhoto,\n            addPhotoToFavorites: _this2.addPhotoToFavorites,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/about\",\n        exact: true,\n        component: About,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    }\n    /**\r\n     * This function updates information of specific Photo Location selected.\r\n     * @param id - the identification number of current Photo being edited\r\n     * @param photo - input data associated with \r\n     */\n\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["D:\\GitHub\\comp4513-assignment1-version-2\\my-app\\src\\App.js"],"names":["React","Component","cloneDeep","Route","PhotoBrowser","Home","About","_","App","props","updatePhoto","id","photo","copyPhotos","state","photos","photoToReplace","find","p","title","city","country","description","latitude","longitude","setState","addPhotoToFavorites","console","log","favorites","copyFavorites","push","updateLocalStorage","removePhoto","index","findIndex","remove","removeFav","copyFav","data","localStorage","setItem","JSON","stringify","getLocalStorageFav","parse","getItem","downloadFavorites","JSZip","require","JSZipUtils","FileSaver","image","url","Promise","resolve","reject","getBinaryContent","err","zip","file","binary","generateAsync","type","then","content","saveAs","temp","fetch","response","json","jsonData","error"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as cloneDeep from 'lodash/cloneDeep';\r\nimport { Route } from 'react-router-dom';\r\nimport PhotoBrowser from './components/PhotoBrowser.js';\r\nimport Home from './components/Home.js';\r\nimport About from './components/About.js';\r\nimport _ from 'lodash';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // temp backup copy of photos\r\n    this.state = { photos: [], favorites: [], temp: [] };\r\n  }\r\n\r\n  /**\r\n   * Asynchronous request for travel photo data.\r\n   */\r\n  async componentDidMount() {\r\n    if (this.getLocalStorageFav() !== null) {\r\n      this.setState({favorites: this.getLocalStorageFav()});\r\n    }\r\n\r\n    try {\r\n      const url = \"http://randyconnolly.com/funwebdev/services/travel/images.php\";\r\n      const response = await fetch(url);\r\n      const jsonData = await response.json();\r\n      this.setState( { photos: jsonData, temp: jsonData } );\r\n    }\r\n    catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders/Displays website elements.\r\n   */\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Route path='/' exact component={Home} />\r\n        <Route path='/home' exact component={Home} />\r\n        <Route path='/browse' exact \r\n          render={ (props) => \r\n          <PhotoBrowser\r\n            downloadFavorites={ this.downloadFavorites}\r\n            removeFav={ this.removeFav}\r\n            removePhoto={ this.removePhoto}\r\n            favorites={ this.state.favorites} \r\n            photos={ this.state.photos } \r\n            updatePhoto={ this.updatePhoto }  \r\n            addPhotoToFavorites={ this.addPhotoToFavorites }\r\n              />\r\n           }\r\n        />\r\n        <Route path='/about' exact component={About} />\r\n      </div>\r\n     \r\n    );\r\n  }\r\n\r\n  /**\r\n   * This function updates information of specific Photo Location selected.\r\n   * @param id - the identification number of current Photo being edited\r\n   * @param photo - input data associated with \r\n   */\r\n  updatePhoto = (id, photo) => {\r\n    // Create a deep clone of photo array from state.\r\n    // We will use a lodash function for that task.\r\n    const copyPhotos = cloneDeep(this.state.photos);\r\n\r\n    // find photo to update in cloned array\r\n    const photoToReplace = copyPhotos.find( p => p.id === id);\r\n\r\n    // replace photo fields with edited values\r\n    photoToReplace.title = photo.title;\r\n    photoToReplace.city = photo.city;\r\n    photoToReplace.country = photo.country;\r\n    photoToReplace.description = photo.description;\r\n    photoToReplace.latitude = photo.latitude;\r\n    photoToReplace.longitude = photo.longitude;\r\n\r\n    // update state\r\n    this.setState( { photos: copyPhotos } );\r\n  }\r\n\r\n  /**\r\n   * This function updates state to add selected photo to favorites array.\r\n   * @param id - id of the selected favorited photo\r\n   */\r\n  addPhotoToFavorites = (id) => {\r\n    // find photo to add\r\n    const photo = this.state.photos.find ( p => p.id === id);\r\n    console.log(photo);\r\n\r\n    // check if item is already in favorite\r\n    // if not add it\r\n    if (!this.state.favorites.find (p => p.id === id) ) {\r\n      // create copy of favorites\r\n      const copyFavorites = cloneDeep(this.state.favorites);\r\n      \r\n      // push item into array\r\n      copyFavorites.push(photo);\r\n      \r\n      // update state\r\n      this.setState( { favorites: copyFavorites });\r\n\r\n      // update local storage\r\n      this.updateLocalStorage(copyFavorites);\r\n    } else {\r\n      console.log (\"Photo already in favorites\")\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This function removes photo selected from photos array.\r\n   * @param id - this is the id of the photo to be removed\r\n   */\r\n  removePhoto = (id) => {\r\n    let index = _.findIndex(this.state.photos, ['id', id]);\r\n      \r\n    if (index > -1) {\r\n        // create copy of favorites\r\n        const copyPhotos = cloneDeep(this.state.photos);\r\n        //console.log(copyPhotos);\r\n        // delete photo\r\n        _.remove(copyPhotos, copyPhotos[index]);\r\n        // update state\r\n        this.setState({ photos: copyPhotos });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This function removes photo selected from favorites array.\r\n   * @param id - this is the id of the favorited photo to be removed\r\n   */\r\n  removeFav = (id) => {\r\n    let index = _.findIndex(this.state.favorites, ['id', id]);\r\n    \r\n    if (index > -1) {\r\n        // create copy of favorites\r\n        const copyFav = cloneDeep(this.state.favorites);\r\n        //console.log(copyPhotos);\r\n        // delete fav\r\n        _.remove(copyFav, copyFav[index]);\r\n        // update state\r\n        this.setState({ favorites: copyFav });\r\n\r\n        // update local storage\r\n        this.updateLocalStorage(copyFav);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This function updates the local Storage to remember favorited photos of user.\r\n   * @param data - array of favorited photos\r\n   */\r\n  updateLocalStorage = (data) => {\r\n    localStorage.setItem('favorites', JSON.stringify(data));\r\n  }\r\n\r\n  /**\r\n   * This function gets/acquires the local Storage of favorited photos of user.\r\n   */\r\n  getLocalStorageFav = () => {\r\n    return JSON.parse(localStorage.getItem('favorites'));\r\n  }\r\n\r\n  downloadFavorites = () => {\r\n    const JSZip = require(\"jszip\");\r\n    const JSZipUtils = require('jszip-utils');\r\n    const FileSaver = require(\"file-saver\");\r\n\r\n    const image = function(url) {\r\n      return new Promise(function(resolve, reject) {\r\n        JSZipUtils.getBinaryContent(url, function(err, data) {\r\n          if(err)\r\n            reject(err);\r\n          else\r\n            resolve(data);\r\n        })\r\n      })\r\n    }\r\n\r\n    var url = \"https://storage.googleapis.com/funwebdev-3rd-travel/large/9504606628.jpg\";\r\n    var zip = new JSZip();\r\n\r\n    zip.file(\"test.jpg\", image(url), {binary:true});\r\n\r\n    zip.generateAsync({type: \"blob\"})\r\n    .then(function(content) {\r\n      FileSaver.saveAs(content, \"archive.zip\");\r\n    });\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}