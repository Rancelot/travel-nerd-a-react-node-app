{"ast":null,"code":"'use strict';\n\nvar utils = require('../utils');\n\nvar ConvertWorker = require('./ConvertWorker');\n\nvar GenericWorker = require('./GenericWorker');\n\nvar base64 = require('../base64');\n\nvar support = require(\"../support\");\n\nvar external = require(\"../external\");\n\nvar NodejsStreamOutputAdapter = null;\n\nif (support.nodestream) {\n  try {\n    NodejsStreamOutputAdapter = require('../nodejs/NodejsStreamOutputAdapter');\n  } catch (e) {}\n}\n/**\r\n * Apply the final transformation of the data. If the user wants a Blob for\r\n * example, it's easier to work with an U8intArray and finally do the\r\n * ArrayBuffer/Blob conversion.\r\n * @param {String} type the name of the final type\r\n * @param {String|Uint8Array|Buffer} content the content to transform\r\n * @param {String} mimeType the mime type of the content, if applicable.\r\n * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the content in the right format.\r\n */\n\n\nfunction transformZipOutput(type, content, mimeType) {\n  switch (type) {\n    case \"blob\":\n      return utils.newBlob(utils.transformTo(\"arraybuffer\", content), mimeType);\n\n    case \"base64\":\n      return base64.encode(content);\n\n    default:\n      return utils.transformTo(type, content);\n  }\n}\n/**\r\n * Concatenate an array of data of the given type.\r\n * @param {String} type the type of the data in the given array.\r\n * @param {Array} dataArray the array containing the data chunks to concatenate\r\n * @return {String|Uint8Array|Buffer} the concatenated data\r\n * @throws Error if the asked type is unsupported\r\n */\n\n\nfunction concat(type, dataArray) {\n  var i,\n      index = 0,\n      res = null,\n      totalLength = 0;\n\n  for (i = 0; i < dataArray.length; i++) {\n    totalLength += dataArray[i].length;\n  }\n\n  switch (type) {\n    case \"string\":\n      return dataArray.join(\"\");\n\n    case \"array\":\n      return Array.prototype.concat.apply([], dataArray);\n\n    case \"uint8array\":\n      res = new Uint8Array(totalLength);\n\n      for (i = 0; i < dataArray.length; i++) {\n        res.set(dataArray[i], index);\n        index += dataArray[i].length;\n      }\n\n      return res;\n\n    case \"nodebuffer\":\n      return Buffer.concat(dataArray);\n\n    default:\n      throw new Error(\"concat : unsupported type '\" + type + \"'\");\n  }\n}\n/**\r\n * Listen a StreamHelper, accumulate its content and concatenate it into a\r\n * complete block.\r\n * @param {StreamHelper} helper the helper to use.\r\n * @param {Function} updateCallback a callback called on each update. Called\r\n * with one arg :\r\n * - the metadata linked to the update received.\r\n * @return Promise the promise for the accumulation.\r\n */\n\n\nfunction _accumulate(helper, updateCallback) {\n  return new external.Promise(function (resolve, reject) {\n    var dataArray = [];\n    var chunkType = helper._internalType,\n        resultType = helper._outputType,\n        mimeType = helper._mimeType;\n    helper.on('data', function (data, meta) {\n      dataArray.push(data);\n\n      if (updateCallback) {\n        updateCallback(meta);\n      }\n    }).on('error', function (err) {\n      dataArray = [];\n      reject(err);\n    }).on('end', function () {\n      try {\n        var result = transformZipOutput(resultType, concat(chunkType, dataArray), mimeType);\n        resolve(result);\n      } catch (e) {\n        reject(e);\n      }\n\n      dataArray = [];\n    }).resume();\n  });\n}\n/**\r\n * An helper to easily use workers outside of JSZip.\r\n * @constructor\r\n * @param {Worker} worker the worker to wrap\r\n * @param {String} outputType the type of data expected by the use\r\n * @param {String} mimeType the mime type of the content, if applicable.\r\n */\n\n\nfunction StreamHelper(worker, outputType, mimeType) {\n  var internalType = outputType;\n\n  switch (outputType) {\n    case \"blob\":\n    case \"arraybuffer\":\n      internalType = \"uint8array\";\n      break;\n\n    case \"base64\":\n      internalType = \"string\";\n      break;\n  }\n\n  try {\n    // the type used internally\n    this._internalType = internalType; // the type used to output results\n\n    this._outputType = outputType; // the mime type\n\n    this._mimeType = mimeType;\n    utils.checkSupport(internalType);\n    this._worker = worker.pipe(new ConvertWorker(internalType)); // the last workers can be rewired without issues but we need to\n    // prevent any updates on previous workers.\n\n    worker.lock();\n  } catch (e) {\n    this._worker = new GenericWorker(\"error\");\n\n    this._worker.error(e);\n  }\n}\n\nStreamHelper.prototype = {\n  /**\r\n   * Listen a StreamHelper, accumulate its content and concatenate it into a\r\n   * complete block.\r\n   * @param {Function} updateCb the update callback.\r\n   * @return Promise the promise for the accumulation.\r\n   */\n  accumulate: function accumulate(updateCb) {\n    return _accumulate(this, updateCb);\n  },\n\n  /**\r\n   * Add a listener on an event triggered on a stream.\r\n   * @param {String} evt the name of the event\r\n   * @param {Function} fn the listener\r\n   * @return {StreamHelper} the current helper.\r\n   */\n  on: function on(evt, fn) {\n    var self = this;\n\n    if (evt === \"data\") {\n      this._worker.on(evt, function (chunk) {\n        fn.call(self, chunk.data, chunk.meta);\n      });\n    } else {\n      this._worker.on(evt, function () {\n        utils.delay(fn, arguments, self);\n      });\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Resume the flow of chunks.\r\n   * @return {StreamHelper} the current helper.\r\n   */\n  resume: function resume() {\n    utils.delay(this._worker.resume, [], this._worker);\n    return this;\n  },\n\n  /**\r\n   * Pause the flow of chunks.\r\n   * @return {StreamHelper} the current helper.\r\n   */\n  pause: function pause() {\n    this._worker.pause();\n\n    return this;\n  },\n\n  /**\r\n   * Return a nodejs stream for this helper.\r\n   * @param {Function} updateCb the update callback.\r\n   * @return {NodejsStreamOutputAdapter} the nodejs stream.\r\n   */\n  toNodejsStream: function toNodejsStream(updateCb) {\n    utils.checkSupport(\"nodestream\");\n\n    if (this._outputType !== \"nodebuffer\") {\n      // an object stream containing blob/arraybuffer/uint8array/string\n      // is strange and I don't know if it would be useful.\n      // I you find this comment and have a good usecase, please open a\n      // bug report !\n      throw new Error(this._outputType + \" is not supported by this method\");\n    }\n\n    return new NodejsStreamOutputAdapter(this, {\n      objectMode: this._outputType !== \"nodebuffer\"\n    }, updateCb);\n  }\n};\nmodule.exports = StreamHelper;","map":null,"metadata":{},"sourceType":"script"}